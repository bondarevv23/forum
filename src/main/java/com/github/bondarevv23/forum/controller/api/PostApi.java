/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.bondarevv23.forum.controller.api;

import com.github.bondarevv23.forum.domain.generated.ErrorResponse;
import com.github.bondarevv23.forum.domain.generated.NotFoundResponse;
import com.github.bondarevv23.forum.domain.generated.PostDTO;
import com.github.bondarevv23.forum.domain.generated.UpdatePostRequest;
import com.github.bondarevv23.forum.domain.generated.WritePostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Controller
@Tag(name = "Post", description = "Post service endpoints")
public interface PostApi {

    /**
     * DELETE /api/v1/posts/{id} : delete post
     * delete post by id
     *
     * @param id id to delete (required)
     * @return post successfully deleted (status code 200)
     *         or error converting the passed parameter to id (status code 400)
     *         or unknown post id (status code 404)
     */
    @Operation(
        operationId = "deletePostById",
        summary = "delete post",
        description = "delete post by id",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "post successfully deleted"),
            @ApiResponse(responseCode = "400", description = "error converting the passed parameter to id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "unknown post id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/posts/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deletePostById(
        @Parameter(name = "id", description = "id to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /api/v1/posts : get all posts
     * get all stored posts
     *
     * @return list of all posts (status code 200)
     */
    @Operation(
        operationId = "findAllPosts",
        summary = "get all posts",
        description = "get all stored posts",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "list of all posts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PostDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/posts",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PostDTO>> findAllPosts(
        
    );


    /**
     * GET /api/v1/posts/author/{authorId} : get all posts by author
     * get all stored posts by author
     *
     * @param authorId id of author (required)
     * @return list of all posts written by the author (status code 200)
     *         or user with this id doesn&#39;t exist (status code 404)
     *         or error converting the passed parameter to id (status code 400)
     */
    @Operation(
        operationId = "findAllPostsByAuthor",
        summary = "get all posts by author",
        description = "get all stored posts by author",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "list of all posts written by the author", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PostDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "user with this id doesn't exist", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NotFoundResponse.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error converting the passed parameter to id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/posts/author/{authorId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PostDTO>> findAllPostsByAuthor(
        @Parameter(name = "authorId", description = "id of author", required = true, in = ParameterIn.PATH) @PathVariable("authorId") Long authorId
    );


    /**
     * GET /api/v1/posts/{id} : get post
     * get post by id
     *
     * @param id id to search (required)
     * @return successfull request (status code 200)
     *         or post with passed id doesn&#39;t exist (status code 404)
     *         or error converting the passed parameter to id (status code 400)
     */
    @Operation(
        operationId = "findPostById",
        summary = "get post",
        description = "get post by id",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfull request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "post with passed id doesn't exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "error converting the passed parameter to id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/posts/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<PostDTO> findPostById(
        @Parameter(name = "id", description = "id to search", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /api/v1/posts/{id} : update post
     * update post by id
     *
     * @param id id to update (required)
     * @param updatePostRequest updated post data (required)
     * @return post successfully updated (status code 200)
     *         or invalid data passed (status code 400)
     *         or post with passed id doesn&#39;t exist (status code 404)
     *         or the request conflicts with the server state (status code 409)
     */
    @Operation(
        operationId = "updatePostById",
        summary = "update post",
        description = "update post by id",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "post successfully updated"),
            @ApiResponse(responseCode = "400", description = "invalid data passed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "post with passed id doesn't exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "the request conflicts with the server state", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/posts/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updatePostById(
        @Parameter(name = "id", description = "id to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdatePostRequest", description = "updated post data", required = true) @Valid @RequestBody UpdatePostRequest updatePostRequest
    );


    /**
     * POST /api/v1/posts : write new post
     * write new user by passed data
     *
     * @param writePostRequest new post data (required)
     * @return post successfully created (status code 200)
     *         or invalid data passed (status code 400)
     *         or the request conflicts with the server state (status code 409)
     */
    @Operation(
        operationId = "write",
        summary = "write new post",
        description = "write new user by passed data",
        tags = { "Post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "post successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "invalid data passed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "the request conflicts with the server state", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<PostDTO> write(
        @Parameter(name = "WritePostRequest", description = "new post data", required = true) @Valid @RequestBody WritePostRequest writePostRequest
    );

}
